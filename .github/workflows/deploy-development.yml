name: Deploy to Development

on:
  push:
    branches: [ development ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 12
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Build application
      run: |
        set -euo pipefail
        ${{ vars.BUILD_CMD || 'npm ci && npm run build' }}
    
    - name: Detect build output directory
      id: detect-out
      run: |
        set -euo pipefail
        if [ -d "./dist" ]; then
          echo "out=dist" >> $GITHUB_OUTPUT
        elif [ -d "./build" ]; then
          echo "out=build" >> $GITHUB_OUTPUT
        else
          echo "::error::Build output directory not found. Expected ./dist or ./build"
          exit 1
        fi
        
        # Verify output directory is not empty
        if [ ! "$(ls -A ${{ steps.detect-out.outputs.out }})" ]; then
          echo "::error::Build output directory is empty"
          exit 1
        fi
    
    - name: Setup SSH key
      run: |
        set -euo pipefail
        echo "${{ secrets.SSH_KEY }}" > key
        chmod 600 key
    
    - name: Deploy to server
      run: |
        set -euo pipefail
        
        # Generate timestamp for release
        TS=$(date -u +%Y%m%d_%H%M%S)
        REL="${{ secrets.TARGET_DIR }}/releases/$TS"
        
        echo "Deploying to release: $REL"
        
        # Create release directory on server
        ssh -i key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || '22' }} \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "mkdir -p $REL"
        
        # Sync build output to release directory
        rsync -avz --delete -e "ssh -i key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || '22' }}" \
          ${{ steps.detect-out.outputs.out }}/ \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$REL/
        
        # Update current symlink
        ssh -i key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || '22' }} \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "ln -sfn $REL ${{ secrets.TARGET_DIR }}/current"
        
        # Clean up old releases (keep last 5)
        ssh -i key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || '22' }} \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "cd ${{ secrets.TARGET_DIR }}/releases && ls -t | tail -n +6 | xargs -r rm -rf"
        
        # Set release directory for post-deploy step
        echo "RELEASE_DIR=$REL" >> $GITHUB_ENV
        
        echo "Deployment completed successfully"
    
    - name: Run post-deploy script
      if: hashFiles('deploy/post-deploy.sh') != ''
      run: |
        set -euo pipefail
        
        # Use the release directory from the previous step
        REL="${{ env.RELEASE_DIR }}"
        
        # Copy post-deploy script to server
        scp -i key -o StrictHostKeyChecking=no -P ${{ secrets.SSH_PORT || '22' }} \
          deploy/post-deploy.sh \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:$REL/
        
        # Make script executable and run it
        ssh -i key -o StrictHostKeyChecking=no -p ${{ secrets.SSH_PORT || '22' }} \
          ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} \
          "chmod +x $REL/post-deploy.sh && cd $REL && ./post-deploy.sh"
    
    - name: Cleanup
      if: always()
      run: |
        rm -f key
